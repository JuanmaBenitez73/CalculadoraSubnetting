@page "/"
@using System.Text.RegularExpressions;
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

<PageTitle>Calculadora de Subnetting</PageTitle>
<body>
	<div id="div1">
		<div id="title">
			<h1>Calculadora de Subnetting (FLSM)</h1>
		</div>
		<br />
		<div id="description">
			<h5>Calculadora de redes con el uso de subnetting mediante el método FLSM (Máscara de Red Fija)</h5>
		</div>
		<br />
		<br />
		<div id="request">
			Introduzca una dirección IP con una máscara de red, el tamaño de las redes y la cantidad de subredes que desea
		</div>
	</div>
	<div id="div-table1">
		<table id="table1" class="my-border">
			<tbody>
				<tr>
					<td class="center my-border">Dirección IP y Máscara</td>
					<td colspan="4" class="my-border"><input type="text" @bind="IpAddress" /></td>
				</tr>
				<tr id="two" class="center">
					<td id="subnets" class="my-border">Subredes</td>
					<td colspan="2" class="right-border">Nombre</td>
					<td colspan="2">Tamaño</td>
				</tr>
				<tr class="top-border">
					<td class="center">Número de subredes:</td>
					<td colspan="2"><input id="n-subnets" type="number" /></td>
					<td><button id="change" type="submit" @onclick="VerifyNumberOfSubnets">Change</button></td>
				</tr>
				<tr>
					<td colspan="5" class="my-border"><button id="submit" type="submit" @onclick="CalculateSubnets">Submit</button></td>@*@onclick="CalculateSubnets"*@
				</tr>
			</tbody>
		</table>
	</div>
	<div id="div-table2">
		<table id="table2" class="my-border center">
			<tbody>
				@for (int i = 0; i < NumberOfSubnets + 1; i++)
				{
					<tr>
						@if (i == 0)
						{
							@for (int j = 0; j < cellDataList.Count; j++)
							{
								<th class="my-border">
									@cellDataList[j].Text
								</th>
							}
						}
						else
						{
							@for (int j = 0; j < cellDataList.Count; j++)
							{
								@switch (j)
								{
									case 0:
										<td>@subnetInfo.Name</td>
										break;
									case 1:
										<td>@subnetInfo.HostsRequired</td>
										break;
									case 2:
										<td>@subnetInfo.AvailableHosts</td>
										break;
									case 3:
										<td>@subnetInfo.SubnetAddress</td>
										break;
									case 4:
										<td>@subnetInfo.SubnetMask</td>
										break;
									case 5:
										<td>@subnetInfo.RangeStart - @subnetInfo.RangeEnd</td>
										break;
									case 6:
										<td>@subnetInfo.BroadcastAddress</td>
										break;
								}
							}
						}
					</tr>
				}
			</tbody>
		</table>
	</div>
</body>

@code {
	private IJSInProcessObjectReference module;

	public class CellData
	{
		public string Text { get; set; }
	}
	private List<CellData> cellDataList = new List<CellData>()
	{
		new CellData(){ Text = "Nombre Subred" },
		new CellData(){ Text = "Hosts necesarios" },
		new CellData(){ Text = "Hosts disponibles" },
		new CellData(){ Text = "Dirección IP" },
		new CellData(){ Text = "Máscara" },
		new CellData(){ Text = "Rango de IPs asignables" },
		new CellData(){ Text = "Broadcast" },
	};

	class SubnetInfo
	{
		public string Name { get; set; }
		public int HostsRequired { get; set; }
		public string SubnetAddress { get; set; }
		public string SubnetMask { get; set; }
		public string BroadcastAddress { get; set; }
		public string RangeStart { get; set; }
		public string RangeEnd { get; set; }
		public int AvailableHosts { get; set; }

		public SubnetInfo() { }
	}

	//Metodos JS

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		module = await JSRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./js/main.js");
	}

	private async Task VerifyNumberOfSubnets() => await module.InvokeVoidAsync("verifyNumberOfSubnets");
	private async Task IncorrectRange() => await module.InvokeVoidAsync("incorrectRange");
	private async Task IncorrectFormat() => await module.InvokeVoidAsync("incorrectFormat");
	private async Task IncorrectNumberOfHosts() => await module.InvokeVoidAsync("incorrectNumberOfHosts");
	private async Task<int> GetSubnetsNumber() => NumberOfSubnets = await module.InvokeAsync<int>("getSubnetsNumber");
	private async Task<string> GetSubnetsName() => subnetInfo.Name = await module.InvokeAsync<string>("getSubnetsName");
	private async Task<int> GetHostsRequired() => subnetInfo.HostsRequired = await module.InvokeAsync<int>("getHostsRequired");

	//Metodos JS

	private bool showResults = false;
	public string IpAddress { get; set; }
	public int NumberOfSubnets { get; set; }
	List<SubnetInfo> Subnets { get; set; } = new List<SubnetInfo>();

	SubnetInfo subnetInfo = new SubnetInfo();

	public async void CalculateSubnets()
	{
		showResults = false;

		Subnets.Clear();

		string ipPattern = @"\b(?:\d{1,3}\.){3}\d{1,3}\b";

		string maskPattern = @"/{1}\d{1,2}";

		string ipAddress = IpAddress;

		int subnetMask = 0;

		Match ipMatch = Regex.Match(ipAddress, ipPattern);

		Match maskMatch = Regex.Match(ipAddress, maskPattern);

		string ip = ipAddress.Split('/')[0];
		List<string> octetos = new List<string>();
		List<int> octetosIp = new List<int>();

		List<byte> ipBytes = new List<byte>();
		byte ipmaskBytes = (byte)(subnetMask);
		List<byte> ipsmaskBytes = new List<byte> { (byte)(subnetMask >> 24), (byte)(subnetMask >> 16), (byte)(subnetMask >> 8), (byte)subnetMask };

		double subnetSize = (double)Math.Pow(2, 32 - subnetMask) / NumberOfSubnets;
		int maxNumberOfHosts = (int)Math.Pow(2, 32 - ipmaskBytes) - 2;

		if (ipMatch.Success && maskMatch.Success)
		{
			subnetMask = int.Parse(ipAddress.Split('/')[1]);

			foreach (var item in ip.Split('.'))
			{
				octetos.Add(item);
			}
			for (int i = 0; i < octetos.Count; i++)
			{
				octetosIp.Add(int.Parse(octetos[i]));
			}
			for (int i = 0; i < octetosIp.Count; i++)
			{
				if (octetosIp[i] >= 0 && octetosIp[i] <= 255)
				{
					ipBytes.Add((byte)(octetosIp[i]));
				}
				else
				{
					IncorrectRange();
				}
			}

			NumberOfSubnets = await module.InvokeAsync<int>("getSubnetsNumber");

			if (subnetInfo.HostsRequired > maxNumberOfHosts)
			{
				IncorrectNumberOfHosts();
			}
			else
			{
				for (int i = 0; i < NumberOfSubnets; i++)
				{
					Subnets[i].HostsRequired = subnetInfo.HostsRequired;

					subnetInfo.Name = await GetSubnetsName();

					subnetInfo.SubnetAddress = GetSubnetAddress(ipBytes, ipsmaskBytes, subnetSize, i);

					subnetInfo.SubnetMask = GetSubnetMask(ipmaskBytes);

					subnetInfo.BroadcastAddress = GetBroadcastAddress(subnetInfo.SubnetAddress, subnetInfo.SubnetMask);

					subnetInfo.RangeStart = GetFirstHostAddress(subnetInfo.SubnetAddress, subnetInfo.SubnetMask);

					subnetInfo.RangeEnd = GetLastHostAddress(subnetInfo.BroadcastAddress, subnetInfo.SubnetMask);

					subnetInfo.AvailableHosts = GetAvailableHosts(subnetInfo.RangeStart, subnetInfo.RangeEnd);

					Subnets.Add(subnetInfo);
				}
			}
		}
		else
		{
			IncorrectFormat();
		}
	}

	private string GetSubnetAddress(List<byte> ipBytes, List<byte> maskBytes, double subnetSize, int subnetIndex)
	{
		List<byte> subnetAddressBytes = new List<byte>();
		for (int i = 0; i < 4; i++)
		{
			byte subnetByte = (byte)(ipBytes[i] & maskBytes[i]);
			subnetByte |= (byte)(subnetIndex >> (8 * (3 - i)) & Convert.ToByte("11111111", 2));
			subnetAddressBytes.Add(subnetByte);
		}
		return string.Join(".", subnetAddressBytes);
	}

	private string GetSubnetMask(int maskBits)
	{
		int fullBytes = maskBits / 8;
		int remainderBits = maskBits % 8;
		List<byte> maskBytes = new List<byte>();

		for (int i = 0; i < fullBytes; i++)
		{
			maskBytes.Add(255);
		}
		if (remainderBits > 0)
		{
			//Esto lo que hace es  una mascara de bits para los bits restantes se utiliza lo de las boquillas  para pasar 8 - remainderBits bits hacia la izquierda <3 juanma guapo vaporeoon.
			int remainderMask = 255 << (8 - remainderBits);
			maskBytes.Add((byte)remainderMask);
		}
		while (maskBytes.Count < 4)
		{
			maskBytes.Add(0);
		}

		return string.Join(".", maskBytes);

	}

	private string GetBroadcastAddress(string subnetAddress, string subnetMask)
	{
		List<byte> subnetAddressBytes = subnetAddress.Split('.').Select(byte.Parse).ToList();
		List<byte> subnetMaskBytes = subnetMask.Split('.').Select(byte.Parse).ToList();
		List<byte> broadcastAddressBytes = new List<byte>();

		for (int i = 0; i < 4; i++)
		{
			byte broadcastByte = (byte)(subnetAddressBytes[i] | ~subnetMaskBytes[i]);
			broadcastAddressBytes.Add(broadcastByte);
		}

		return string.Join(".", broadcastAddressBytes);

	}

	private string GetFirstHostAddress(string subnetAddress, string subnetMask)
	{
		List<byte> subnetAddressBytes = subnetAddress.Split('.').Select(byte.Parse).ToList();
		List<byte> subnetMaskBytes = subnetMask.Split('.').Select(byte.Parse).ToList();

		int maskBits = subnetMaskBytes.Sum(b => Convert.ToString(b, 2).Count(c => c == '1')); 

		
		if (maskBits < 1 || maskBits > 32)
		{
			throw new ArgumentException("La máscara de subred especificada no es válida.");
		}

		int octetIndex = (maskBits - 1) / 8; 

		
		subnetAddressBytes[octetIndex] += 1;

		return string.Join(".", subnetAddressBytes);
	}

	private string GetLastHostAddress(string broadcastAddress, string subnetMask)
	{
		List<byte> broadcastAddressBytes = broadcastAddress.Split('.').Select(byte.Parse).ToList();
		List<byte> subnetMaskBytes = subnetMask.Split('.').Select(byte.Parse).ToList();

		int maskBits = subnetMaskBytes.Sum(b => Convert.ToString(b, 2).Count(c => c == '1'));


		if (maskBits < 1 || maskBits > 32)
		{
			throw new ArgumentException("La máscara de subred especificada no es válida.");
		}

		int octetIndex = (maskBits - 1) / 8;


		broadcastAddressBytes[octetIndex] += 1;

		return string.Join(".", broadcastAddressBytes);
	}

	private int GetAvailableHosts(string rangeStart, string rangeEnd)
	{
		List<byte> rangeStartBytes = rangeStart.Split('.').Select(byte.Parse).ToList();
		List<byte> rangeEndBytes = rangeEnd.Split('.').Select(byte.Parse).ToList();

		int availableHosts = 0;

		for (int i = 0; i < 4; i++)
		{
			availableHosts += rangeEndBytes[i] - rangeStartBytes[i] + 1;
		}

		return availableHosts;

	}
}
